/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.siroc.interfaces;

import br.com.siroc.Editor.Editor;
import br.com.siroc.Editor.LeitorTeclas;
import br.com.siroc.Jasper.Relatorio;
import br.com.siroc.dao.DAO;
import br.com.siroc.dao.PedidoDAO;
import br.com.siroc.modelo.Cliente;
import br.com.siroc.modelo.Fornecedor;
import br.com.siroc.modelo.Pedido;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;

/**
 *
 * @author matteus
 */
public class ListagemPedidos extends javax.swing.JInternalFrame {

    /**
     * Creates new form Listagem_Pedidos
     */
    //Id, cliente, data, vencimento, valor, valor devedor, fornecedor, pagamento, tipo...
    DefaultTableModel tmPedido = new DefaultTableModel(null,
            new String[]{"Marcação", "Cliente", "Data", "Vencimento", "Valor Total",
                "Valor Devedor", "Fornecedor", "Pagamento", "Tipo Pedido", "Cidade", "Status", "ID"}) {
                public Class<?> getColumnClass(int columnIndex) {
                    if (columnIndex == 0) {
                        return Boolean.class;
                    } else {
                        return super.getColumnClass(columnIndex);
                    }
                }
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, false, false, false,
                    false, false, false
                };

                @Override
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit[columnIndex];
                }
            };

    PedidoDAO peddao = new PedidoDAO();
    DAO<Pedido> pdao = new DAO<Pedido>(Pedido.class);

    List<Pedido> pedidos;
    List<Cliente> clientes;
    List<Fornecedor> fornecedores;

    HashSet cCliente;
    HashSet cEstado;
    HashSet cCidade;
    HashSet cFornecedor;

    String cliente;
    String fornecedor;

    Date dataVencimento;
    Date dataInicial;
    Date dataFinal;

    Double valorInicial, valorFinal;
    String estado, cidade, pago, tipo_pgto, tipo_ped;
    JDesktopPane painel;

    List<Object[]> list; //pesquisa avançada

    public ListagemPedidos(JDesktopPane painel) {
        super("Cella - Listagem de Produtos");
        initComponents();
        populateFields();
        this.painel = painel;
        tabela.setRowHeight(23);
        hinter();
        this.setFocusable(true);
        this.addKeyListener(new LeitorTeclas());
        /* new String[]{, "Cliente", "Data", "Vencimento", "Valor Total",
         "Valor Devedor", "Fornecedor", "Pagamento", "Tipo Pedido", "Cidade", "Status"  ID}) {*/
        tabela.setAutoResizeMode(tabela.AUTO_RESIZE_OFF);
        tabela.getColumnModel().getColumn(0).setPreferredWidth(70);
        tabela.getColumnModel().getColumn(1).setPreferredWidth(225);
        tabela.getColumnModel().getColumn(2).setPreferredWidth(110);
        tabela.getColumnModel().getColumn(3).setPreferredWidth(110);
        tabela.getColumnModel().getColumn(4).setPreferredWidth(110);
        tabela.getColumnModel().getColumn(5).setPreferredWidth(110);
        tabela.getColumnModel().getColumn(6).setPreferredWidth(225);
        tabela.getColumnModel().getColumn(7).setPreferredWidth(90);
        tabela.getColumnModel().getColumn(8).setPreferredWidth(85);
        tabela.getColumnModel().getColumn(9).setPreferredWidth(150);
        tabela.getColumnModel().getColumn(10).setPreferredWidth(115);
        tabela.getColumnModel().getColumn(11).setPreferredWidth(60);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLInicio = new javax.swing.JLabel();
        jLCidade = new javax.swing.JLabel();
        jLEstado = new javax.swing.JLabel();
        jLCliente = new javax.swing.JLabel();
        jLTipo_Pagamento = new javax.swing.JLabel();
        jLFornecedor = new javax.swing.JLabel();
        jLTipo_Pedido = new javax.swing.JLabel();
        jCBCliente = new javax.swing.JComboBox();
        jCBEstado = new javax.swing.JComboBox();
        jCBCidade = new javax.swing.JComboBox();
        jCBFornecedor = new javax.swing.JComboBox();
        jCBTipo_Pagamento = new javax.swing.JComboBox();
        jCBTipo_Pedido = new javax.swing.JComboBox();
        jLCabecalho = new javax.swing.JLabel();
        jCBPago = new javax.swing.JComboBox();
        jDCVencimento = new com.toedter.calendar.JDateChooser();
        jRBCliente = new javax.swing.JRadioButton();
        jRBFornecedor = new javax.swing.JRadioButton();
        jRBVencimento = new javax.swing.JRadioButton();
        jRBEstado = new javax.swing.JRadioButton();
        jRBCidade = new javax.swing.JRadioButton();
        jRBPago = new javax.swing.JRadioButton();
        jRBTipo_Pagamento = new javax.swing.JRadioButton();
        jRBTipo_Pedido = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        jTBSeleciona = new javax.swing.JToggleButton();
        jBPesquisar = new javax.swing.JButton();
        jBPDF = new javax.swing.JButton();
        jLAjuda = new javax.swing.JLabel();
        jBLimpar1 = new javax.swing.JButton();
        jBImprimirMeia = new javax.swing.JButton();
        jBVisualizar = new javax.swing.JButton();
        jTBMarca = new javax.swing.JToggleButton();
        jRBData = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jDCDataInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jDCDataFinal = new com.toedter.calendar.JDateChooser();

        setClosable(true);

        jLInicio.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLInicio.setText("Vencimento:");

        jLCidade.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLCidade.setText("Cidade:");

        jLEstado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLEstado.setText("Estado:");

        jLCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLCliente.setText("Cliente:");

        jLTipo_Pagamento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLTipo_Pagamento.setText("Tipo de Pagamento:");

        jLFornecedor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLFornecedor.setText("Fornecedor:");

        jLTipo_Pedido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLTipo_Pedido.setText("Tipo de Pedido:");

        jCBCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCBEstado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCBCidade.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCBFornecedor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jCBTipo_Pagamento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBTipo_Pagamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cheque", "Boleto", "Vale", "Cartão", "Depósito", "Dinheiro" }));

        jCBTipo_Pedido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBTipo_Pedido.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NF", "SO" }));

        jLCabecalho.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLCabecalho.setText("Pesquisa de Pedidos");

        jCBPago.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCBPago.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Em Aberto", "Parcialmente", "Pago" }));

        jDCVencimento.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jRBCliente.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBFornecedor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBVencimento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBEstado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBCidade.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBPago.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBTipo_Pagamento.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jRBTipo_Pedido.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        tabela.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tabela.setModel(tmPedido);
        tabela.setUpdateSelectionOnSort(false);
        tabela.setVerifyInputWhenFocusTarget(false);
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);

        jTBSeleciona.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTBSeleciona.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/editar.png"))); // NOI18N
        jTBSeleciona.setText("Selecionar Tudo");
        jTBSeleciona.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBSelecionaActionPerformed(evt);
            }
        });

        jBPesquisar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/pesquisar.png"))); // NOI18N
        jBPesquisar.setText("Pesquisar");
        jBPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPesquisarActionPerformed(evt);
            }
        });

        jBPDF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBPDF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/pdf (1).png"))); // NOI18N
        jBPDF.setText("Gerar PDF");
        jBPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPDFActionPerformed(evt);
            }
        });

        jLAjuda.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLAjuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/help.png"))); // NOI18N
        jLAjuda.setText("Ajuda");
        jLAjuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLAjudaMouseClicked(evt);
            }
        });

        jBLimpar1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBLimpar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/limpar.png"))); // NOI18N
        jBLimpar1.setText("Limpar");
        jBLimpar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimpar1ActionPerformed(evt);
            }
        });

        jBImprimirMeia.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBImprimirMeia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/imprimir.png"))); // NOI18N
        jBImprimirMeia.setText("Imprimir");
        jBImprimirMeia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBImprimirMeiaActionPerformed(evt);
            }
        });

        jBVisualizar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBVisualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/visualizar.png"))); // NOI18N
        jBVisualizar.setText("Visualizar");
        jBVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBVisualizarActionPerformed(evt);
            }
        });

        jTBMarca.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTBMarca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/siroc/Imagens/editar.png"))); // NOI18N
        jTBMarca.setText("Marcar Tudo");
        jTBMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBMarcaActionPerformed(evt);
            }
        });

        jRBData.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Data inicial:");

        jDCDataInicial.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("até");

        jDCDataFinal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRBData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDCDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jDCDataFinal, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE))
                    .addComponent(jLCabecalho)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRBTipo_Pagamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLTipo_Pagamento)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCBTipo_Pagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jBPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jBVisualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jBPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBImprimirMeia))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jRBPago)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCBPago, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jTBSeleciona))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jRBCidade)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLCidade)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCBCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jRBFornecedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jRBCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLFornecedor)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCBFornecedor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(27, 27, 27)
                            .addComponent(jLCliente)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCBCliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jRBVencimento)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLInicio)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jDCVencimento, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jRBTipo_Pedido)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLTipo_Pedido)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jCBTipo_Pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(jRBEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLEstado)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jCBEstado, 0, 47, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLAjuda)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTBMarca)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBLimpar1))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(49, 49, 49))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLCabecalho)
                    .addComponent(jLAjuda))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCBCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLCliente))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jRBCliente)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCBFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLFornecedor)
                            .addComponent(jRBFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCBCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLCidade))
                            .addComponent(jRBCidade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCBTipo_Pedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLTipo_Pedido))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCBEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLEstado))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jRBEstado))
                            .addComponent(jRBTipo_Pedido, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRBVencimento)
                            .addComponent(jLInicio)
                            .addComponent(jDCVencimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jRBData)
                            .addComponent(jLabel1)
                            .addComponent(jDCDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jDCDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRBTipo_Pagamento, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLTipo_Pagamento)
                                .addComponent(jCBTipo_Pagamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRBPago, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCBPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTBSeleciona)))
                        .addGap(18, 18, 18)
                        .addComponent(jBPesquisar)
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBPDF)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jBVisualizar)
                                .addComponent(jBImprimirMeia))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBLimpar1)
                    .addComponent(jTBMarca))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTBSelecionaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBSelecionaActionPerformed
        if (jTBSeleciona.isSelected()) {
            jRBCidade.setSelected(true);
            jRBCliente.setSelected(true);
            jRBEstado.setSelected(true);
            jRBFornecedor.setSelected(true);
            jRBVencimento.setSelected(true);
            jRBPago.setSelected(true);
            jRBTipo_Pagamento.setSelected(true);
            jRBTipo_Pedido.setSelected(true);
        } else {
            jRBCidade.setSelected(false);
            jRBCliente.setSelected(false);
            jRBEstado.setSelected(false);
            jRBFornecedor.setSelected(false);
            jRBVencimento.setSelected(false);
            jRBPago.setSelected(false);
            jRBTipo_Pagamento.setSelected(false);
            jRBTipo_Pedido.setSelected(false);
        }
    }//GEN-LAST:event_jTBSelecionaActionPerformed

    private void jBPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPDFActionPerformed
        String query = "select clientes.cli_nome,\n"
                + " clientes.cli_endereco ||', ' ||clientes.cli_bairro || '. ' || clientes.cli_cidade || '-' || clientes.cli_estado as endereco,\n"
                + " clientes.cli_cep,\n"
                + " clientes.cli_telefone,\n"
                + " clientes.cli_cnpj_cpf,\n"
                + " clientes.cli_inscricao_est,\n"
                + " pedidos.ped_id,\n"
                + " pedidos.ped_pagamento,\n"
                + " pedidos.ped_pedido,\n"
                + " to_char(pedidos.ped_vencimento,'dd/mm/yyyy') as vencimento,\n"
                + " to_char(pedidos.ped_data,'dd/mm/yyyy') as data,\n"
                + " produtos.pro_nome || ' - ' || to_char(produtos.pro_peso,'09D90') || ' Kg' as produto,\n"
                + " itens.item_quantidade,\n"
                + " to_char((itens.item_valor) ,'R$999G990D99') as item_valor,\n"
                + " to_char((itens.item_valor * itens.item_quantidade) ,'R$999G990D99') as total_parcial\n"
                + " from clientes inner join pedidos on clientes.cli_id = pedidos.fk_cliente\n"
                + " 	inner join itens on pedidos.ped_id = itens.fk_pedido\n"
                + " 	inner join produtos on itens.fk_produto = produtos.pro_id\n"
                + " 	inner join fornecedores on produtos.fk_fornecedor = fornecedores.for_id WHERE 1=1 AND \n";
        Boolean aux;
        if (tabela.getRowCount() != 0) {
            for (int i = 0; i < tabela.getRowCount(); i++) {
                aux = (Boolean) tabela.getValueAt(i, 0);
                if (aux == null) {

                } else if (aux == true) {
                    query += " pedidos.ped_id = " + tabela.getValueAt(i, 11) + " OR";
                }
            }
        }

        query = query.substring(0, query.length() - 3);

        query += " group by clientes.cli_nome,\n"
                + " clientes.cli_endereco,\n"
                + " clientes.cli_bairro,\n"
                + " clientes.cli_cidade,\n"
                + " clientes.cli_estado,\n"
                + " clientes.cli_cep,\n"
                + " clientes.cli_telefone,\n"
                + " clientes.cli_cnpj_cpf,\n"
                + " clientes.cli_inscricao_est,\n"
                + " pedidos.ped_id,\n"
                + " pedidos.ped_pagamento,\n"
                + " pedidos.ped_vencimento,\n"
                + " pedidos.ped_data,\n"
                + " pedidos.ped_pedido,\n"
                + " produtos.pro_nome,\n"
                + " produtos.pro_peso,\n"
                + " itens.item_quantidade,\n"
                + " itens.item_valor\n"
                + " order by pedidos.ped_id;";

        Relatorio rel = new Relatorio();
        try {
            int horas = new Date().getHours();
            int minutos = new Date().getMinutes();
            String hora = String.valueOf(horas) + "h" + String.valueOf(minutos) + "m";
            java.sql.Date data = new java.sql.Date(new Date().getTime());
            String nome = "\\" + Editor.formatDataPasta(data) + " - " + hora + ".pdf";
            rel.gerarPedido(query, 0, nome);
            JOptionPane.showMessageDialog(this, "PDF gerado com sucesso!",
                    "Activity Performed Successfully",
                    JOptionPane.WARNING_MESSAGE);
        } catch (JRException | SQLException | IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBPDFActionPerformed

    private void jBPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPesquisarActionPerformed
        while (tmPedido.getRowCount() > 0) {
            tmPedido.removeRow(0);
        }

        /* new String[]{, "Cliente", "Data", "Vencimento", "Valor Total",
         "Valor Devedor", "Fornecedor", "Pagamento", "Tipo Pedido", "Cidade", "Status"  ID}) {*/
        list = peddao.buscaAvançada(montaQuery());
        for (int i = 0; i < list.size(); i++) {
            Object[] resultado = list.get(i);
            tmPedido.addRow(new String[]{null, null, null, null});
            //Posições a baixo relativos as ordem das colunas do JTABLE
            tmPedido.setValueAt(resultado[3], i, 1); //Cliente
            tmPedido.setValueAt(Editor.formatData((Date) resultado[0]), i, 2); //Data
            if (resultado[11] == null) {
                tmPedido.setValueAt("", i, 3); //Vencimento    
            } else {
                tmPedido.setValueAt(Editor.formatData((Date) resultado[11]), i, 3); //Vencimento
            }
            tmPedido.setValueAt(Editor.format((Double) resultado[5]), i, 4); //Valor Total
            if (resultado[12] != null) {
                Double valor = (Double) resultado[5] - (Double) resultado[12];
                tmPedido.setValueAt(Editor.format(valor), i, 5);//devedor
            } else {
                tmPedido.setValueAt("0,00", i, 5);//devedor
            }
            tmPedido.setValueAt(resultado[4], i, 6); //Fornecedor
            tmPedido.setValueAt(resultado[7], i, 7); //Tipo pagamento
            tmPedido.setValueAt(resultado[8], i, 8); //Tipo de pedido
            tmPedido.setValueAt(resultado[1], i, 9); //Cidade
            tmPedido.setValueAt(resultado[6], i, 10); //Status
            tmPedido.setValueAt(resultado[10], i, 11); //ID
        }
    }//GEN-LAST:event_jBPesquisarActionPerformed

    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        if (evt.getButton() == evt.BUTTON1) {
            int linha = tabela.getSelectedRow();
            int col = tabela.getSelectedColumn();

            if (col == 0) {
                Boolean aux = (Boolean) tmPedido.getValueAt(linha, col);
                if (aux == null || aux == false) {
                    tmPedido.setValueAt(true, linha, col);
                } else if (aux = true) {
                    tmPedido.setValueAt(false, linha, col);
                }

            }
        }

        if (evt.getButton() != evt.BUTTON3 && evt.getClickCount() == 2) {
            AtualizaPedido ap = new AtualizaPedido(list.
                    get(tabela.getSelectedRow()), this, painel);
            ap.setVisible(true);
        }

    }//GEN-LAST:event_tabelaMouseClicked

    private void jLAjudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLAjudaMouseClicked
        if (evt.getButton() != evt.BUTTON3 && evt.getClickCount() == 2) {
            String caminho = System.getenv("USERPROFILE")
                    + "\\Documents\\nbng\\siroc\\ajuda\\Manual do Proprietário - "
                    + "SIROC versão 1.9.9.pdf";
            File arquivo = new File(caminho);
            try {
                Desktop.getDesktop().open(arquivo);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex, "ERRO", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jLAjudaMouseClicked

    private void jBLimpar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimpar1ActionPerformed
        ListagemPedidos lp = new ListagemPedidos(painel);
        painel.add(lp);
        this.dispose();
        lp.setVisible(true);
    }//GEN-LAST:event_jBLimpar1ActionPerformed

    private void jBImprimirMeiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBImprimirMeiaActionPerformed
        String query = "select clientes.cli_nome,\n"
                + " clientes.cli_endereco ||', ' ||clientes.cli_bairro || '. ' || clientes.cli_cidade || '-' || clientes.cli_estado as endereco,\n"
                + " clientes.cli_cep,\n"
                + " clientes.cli_telefone,\n"
                + " clientes.cli_cnpj_cpf,\n"
                + " clientes.cli_inscricao_est,\n"
                + " pedidos.ped_id,\n"
                + " pedidos.ped_pagamento,\n"
                + " pedidos.ped_pedido,\n"
                + " to_char(pedidos.ped_vencimento,'dd/mm/yyyy') as vencimento,\n"
                + " to_char(pedidos.ped_data,'dd/mm/yyyy') as data,\n"
                + " produtos.pro_nome || ' - ' || to_char(produtos.pro_peso,'09D90') || ' Kg' as produto,\n"
                + " itens.item_quantidade,\n"
                + " to_char((itens.item_valor) ,'R$999G990D99') as item_valor,\n"
                + " to_char((itens.item_valor * itens.item_quantidade) ,'R$999G990D99') as total_parcial\n"
                + " from clientes inner join pedidos on clientes.cli_id = pedidos.fk_cliente\n"
                + " 	inner join itens on pedidos.ped_id = itens.fk_pedido\n"
                + " 	inner join produtos on itens.fk_produto = produtos.pro_id\n"
                + " 	inner join fornecedores on produtos.fk_fornecedor = fornecedores.for_id WHERE 1=1 AND \n";
        Boolean aux;
        if (tabela.getRowCount() != 0) {
            for (int i = 0; i < tabela.getRowCount(); i++) {
                aux = (Boolean) tabela.getValueAt(i, 0);
                if (aux == null) {

                } else if (aux == true) {
                    query += " pedidos.ped_id = " + tabela.getValueAt(i, 11) + " OR";
                }
            }
        }

        query = query.substring(0, query.length() - 3);
        query += " group by clientes.cli_nome,\n"
                + " clientes.cli_endereco,\n"
                + " clientes.cli_bairro,\n"
                + " clientes.cli_cidade,\n"
                + " clientes.cli_estado,\n"
                + " clientes.cli_cep,\n"
                + " clientes.cli_telefone,\n"
                + " clientes.cli_cnpj_cpf,\n"
                + " clientes.cli_inscricao_est,\n"
                + " pedidos.ped_id,\n"
                + " pedidos.ped_pagamento,\n"
                + " pedidos.ped_vencimento,\n"
                + " pedidos.ped_data,\n"
                + " pedidos.ped_pedido,\n"
                + " produtos.pro_nome,\n"
                + " produtos.pro_peso,\n"
                + " itens.item_quantidade,\n"
                + " itens.item_valor\n"
                + " order by pedidos.ped_id;";

        Relatorio rel = new Relatorio();

        try {
            rel.gerarPedido(query, 1, "");
            JOptionPane.showMessageDialog(this, "Impressão efetuada sucesso!",
                    "Activity Performed Successfully",
                    JOptionPane.WARNING_MESSAGE);
        } catch (JRException | SQLException | IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBImprimirMeiaActionPerformed

    private void jBVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBVisualizarActionPerformed
        String query = "select clientes.cli_nome,\n"
                + " clientes.cli_endereco ||', ' ||clientes.cli_bairro || '. ' || clientes.cli_cidade || '-' || clientes.cli_estado as endereco,\n"
                + " clientes.cli_cep,\n"
                + " clientes.cli_telefone,\n"
                + " clientes.cli_cnpj_cpf,\n"
                + " clientes.cli_inscricao_est,\n"
                + " pedidos.ped_id,\n"
                + " pedidos.ped_pagamento,\n"
                + " pedidos.ped_pedido,\n"
                + " to_char(pedidos.ped_vencimento,'dd/mm/yyyy') as vencimento,\n"
                + " to_char(pedidos.ped_data,'dd/mm/yyyy') as data,\n"
                + " produtos.pro_nome || ' - ' || to_char(produtos.pro_peso,'09D90') || ' Kg' as produto,\n"
                + " itens.item_quantidade,\n"
                + " to_char((itens.item_valor) ,'R$999G990D99') as item_valor,\n"
                + " to_char((itens.item_valor * itens.item_quantidade) ,'R$999G990D99') as total_parcial\n"
                + " from clientes inner join pedidos on clientes.cli_id = pedidos.fk_cliente\n"
                + " 	inner join itens on pedidos.ped_id = itens.fk_pedido\n"
                + " 	inner join produtos on itens.fk_produto = produtos.pro_id\n"
                + " 	inner join fornecedores on produtos.fk_fornecedor = fornecedores.for_id WHERE 1=1 AND \n";
        Boolean aux;
        if (tabela.getRowCount() != 0) {
            for (int i = 0; i < tabela.getRowCount(); i++) {
                aux = (Boolean) tabela.getValueAt(i, 0);
                if (aux == null) {

                } else if (aux == true) {
                    query += " pedidos.ped_id = " + tabela.getValueAt(i, 11) + " OR";
                }
            }
        }

        query = query.substring(0, query.length() - 3);

        query += " group by clientes.cli_nome,\n"
                + " clientes.cli_endereco,\n"
                + " clientes.cli_bairro,\n"
                + " clientes.cli_cidade,\n"
                + " clientes.cli_estado,\n"
                + " clientes.cli_cep,\n"
                + " clientes.cli_telefone,\n"
                + " clientes.cli_cnpj_cpf,\n"
                + " clientes.cli_inscricao_est,\n"
                + " pedidos.ped_id,\n"
                + " pedidos.ped_pagamento,\n"
                + " pedidos.ped_vencimento,\n"
                + " pedidos.ped_data,\n"
                + " pedidos.ped_pedido,\n"
                + " produtos.pro_nome,\n"
                + " produtos.pro_peso,\n"
                + " itens.item_quantidade,\n"
                + " itens.item_valor\n"
                + " order by pedidos.ped_id;";

        Relatorio rel = new Relatorio();

        try {
            rel.gerarPedido(query, 2, "");
        } catch (JRException | SQLException | IOException ex) {
            JOptionPane.showMessageDialog(null, ex, "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBVisualizarActionPerformed

    private void jTBMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBMarcaActionPerformed
        if (tabela.getRowCount() != 0) {
            if (jTBMarca.isSelected()) {
                for (int i = 0; i < tabela.getRowCount(); i++) {
                    tmPedido.setValueAt(true, i, 0);
                }
            } else {
                for (int i = 0; i < tabela.getRowCount(); i++) {
                    tmPedido.setValueAt(false, i, 0);
                }
            }
        }
    }//GEN-LAST:event_jTBMarcaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBImprimirMeia;
    private javax.swing.JButton jBLimpar1;
    private javax.swing.JButton jBPDF;
    private javax.swing.JButton jBPesquisar;
    private javax.swing.JButton jBVisualizar;
    private javax.swing.JComboBox jCBCidade;
    private javax.swing.JComboBox jCBCliente;
    private javax.swing.JComboBox jCBEstado;
    private javax.swing.JComboBox jCBFornecedor;
    private javax.swing.JComboBox jCBPago;
    private javax.swing.JComboBox jCBTipo_Pagamento;
    private javax.swing.JComboBox jCBTipo_Pedido;
    private com.toedter.calendar.JDateChooser jDCDataFinal;
    private com.toedter.calendar.JDateChooser jDCDataInicial;
    private com.toedter.calendar.JDateChooser jDCVencimento;
    private javax.swing.JLabel jLAjuda;
    private javax.swing.JLabel jLCabecalho;
    private javax.swing.JLabel jLCidade;
    private javax.swing.JLabel jLCliente;
    private javax.swing.JLabel jLEstado;
    private javax.swing.JLabel jLFornecedor;
    private javax.swing.JLabel jLInicio;
    private javax.swing.JLabel jLTipo_Pagamento;
    private javax.swing.JLabel jLTipo_Pedido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRBCidade;
    private javax.swing.JRadioButton jRBCliente;
    private javax.swing.JRadioButton jRBData;
    private javax.swing.JRadioButton jRBEstado;
    private javax.swing.JRadioButton jRBFornecedor;
    private javax.swing.JRadioButton jRBPago;
    private javax.swing.JRadioButton jRBTipo_Pagamento;
    private javax.swing.JRadioButton jRBTipo_Pedido;
    private javax.swing.JRadioButton jRBVencimento;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jTBMarca;
    private javax.swing.JToggleButton jTBSeleciona;
    private javax.swing.JTable tabela;
    // End of variables declaration//GEN-END:variables

    private void populateFields() {
        pedidos = pdao.listaTodos();
        cCliente = new HashSet();
        cEstado = new HashSet();
        cCidade = new HashSet();
        cFornecedor = new HashSet();

        for (int i = 0; i < pedidos.size(); i++) {
            cCliente.add(pedidos.get(i).getCliente().getNome());
            cEstado.add(pedidos.get(i).getCliente().getEstado());
            cCidade.add(pedidos.get(i).getCliente().getCidade());
            for (int j = 0; j < pedidos.get(i).getItens().size(); j++) {
                cFornecedor.add(pedidos.get(i).getItens().get(j).getProduto().getFornecedor().getNome());
            }
        }

        clientes = new ArrayList<>(cCliente);
        fornecedores = new ArrayList<>(cFornecedor);

        Iterator i = cCliente.iterator();
        while (i.hasNext()) {
            jCBCliente.addItem(i.next());
        }

        i = null;
        i = cEstado.iterator();
        while (i.hasNext()) {
            jCBEstado.addItem(i.next());
        }

        i = null;
        i = cCidade.iterator();
        while (i.hasNext()) {
            jCBCidade.addItem(i.next());
        }
        i = null;
        i = cFornecedor.iterator();
        while (i.hasNext()) {
            jCBFornecedor.addItem(i.next());
        }

    }

    public String montaQuery() {
        String query = "SELECT pedido.data,cliente.cidade,cliente.estado,cliente.nome,"
                + "fornecedor.nome,sum(item.valor_alterado*item.quantidade),pedido.status,"
                + "pedido.tipo_pagamento,pedido.tipo_pedido,"
                + "(sum(item.valor_alterado*item.quantidade)*fornecedor.frete)/100,pedido.id, "
                + "pedido.vencimento,pedido.obs "
                + "FROM Pedido pedido "
                + "INNER JOIN pedido.cliente as cliente "
                + "INNER JOIN pedido.itens as item "
                + "INNER JOIN item.produto as produto "
                + "INNER JOIN produto.fornecedor as fornecedor "
                + "WHERE 1=1 ";

        if (jRBCliente.isSelected()) {
            cliente = jCBCliente.getSelectedItem().toString();
            query += "AND lower(cliente.nome) like lower('%" + cliente + "%') ";
        }
        if (jRBFornecedor.isSelected()) {
            fornecedor = jCBFornecedor.getSelectedItem().toString();
            query += "AND lower(fornecedor.nome) like lower('%" + fornecedor + "%')";
        }
        if (jRBCidade.isSelected()) {
            cidade = jCBCidade.getSelectedItem().toString();
            query += "AND lower(cliente.cidade) like lower('%" + cidade + "%') ";
        }
        if (jRBVencimento.isSelected() && jDCVencimento.getDate() != null) {
            dataVencimento = jDCVencimento.getDate();
            query += "AND pedido.vencimento <='" + dataVencimento + "'";
        } else if (jRBVencimento.isSelected()) {
            JOptionPane.showMessageDialog(ListagemPedidos.this,
                    "Pesquisa efetuada sem dados. \n Valor não especificado.");
        }

        if (jRBEstado.isSelected()) {
            estado = jCBEstado.getSelectedItem().toString();
            query += "AND lower(cliente.estado) like lower('" + estado + "') ";
        }

        if (jRBPago.isSelected()) {
            if (jCBPago.getSelectedItem().toString().equals("Pago")) {
                pago = jCBPago.getSelectedItem().toString();
                query += "AND lower(pedido.status) like lower('" + pago + "') ";
            } else {
                query += "AND lower(pedido.status) is null ";
            }
        }
        if (jRBTipo_Pagamento.isSelected()) {
            tipo_pgto = jCBTipo_Pagamento.getSelectedItem().toString();
            query += "AND lower(pedido.tipo_pagamento) like lower('" + tipo_pgto + "') ";
        }
        if (jRBTipo_Pedido.isSelected()) {
            tipo_ped = jCBTipo_Pedido.getSelectedItem().toString();
            query += "AND lower(pedido.tipo_pedido) like lower('" + tipo_ped + "') ";
        }
        query += "GROUP BY pedido.data,cliente.cidade,cliente.estado,cliente.nome, fornecedor.nome, fornecedor.frete, pedido.status,"
                + "pedido.tipo_pagamento,pedido.tipo_pedido,pedido.id,pedido.vencimento,pedido.obs ";

        if (jRBData.isSelected() && jDCDataInicial.getDate() != null && jDCDataFinal.getDate() != null) {
            dataInicial = jDCDataInicial.getDate();
            dataFinal = jDCDataFinal.getDate();
            query += "HAVING pedido.data BETWEEN '" + dataInicial + "' AND '" + dataFinal + "'";
        } else if (jRBData.isSelected()) {
            JOptionPane.showMessageDialog(ListagemPedidos.this,
                    "Pesquisa efetuada sem dados. \n Preencha os dois campos de data para realizar a pesquisa.");
        }
        return query + " order by pedido.data,cliente.nome";
    }

    private void hinter() {
        jLAjuda.setToolTipText("<html>Esta tela é responsável pela Listagem de Pedidos,<br>"
                + "onde a listagem pode ser efetuada escolhendo as cláusulas no lado esquerdo,<br>"
                + "sendo necessário preencher os botões ao lado e pesquisar.<br>"
                + "1. O botão \"Selecionar Tudo\" facilita o preenchimento dos campos escolhidos.<br>"
                + "2. O botão limpar reinicia a tela limpando os campos.<br>"
                + "3. Para consultar o Manual do Proprietário, basta dar um duplo clique em \"Ajuda\" ou tecle F1.</html>");
    }
}
